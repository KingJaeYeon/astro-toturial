---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../components/BlogPost.astro';
// 페이지 경로의 배열을 반환(동적으로 페이지 생성)
export async function getStaticPaths() {
    const allPosts = await Astro.glob('../posts/*.md');

    // 각 Markdown 게시물을 하나씩 살펴보고 각 태그 배열을 하나의 더 큰 배열로 결합합니다.
    // 그런 다음 찾은 모든 개별 태그에서 새로운 Set을 만듭니다 (반복되는 값을 무시하기 위해).
    // 마지막으로 해당 세트를 중복 없는 배열로 변환하여 페이지에 태그 목록을 표시하는 데 사용할 수 있습니다.
    const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];

    return uniqueTags.map((tag) => {
        const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
        return {
            params: {tag},
            props: {posts: filteredPosts},
        };
    });
}
const { tag } = Astro.params;
const { posts } = Astro.props;

---
<BaseLayout pageTitle={tag}>
    <p>Posts tagged with {tag}</p>
    <ul>
        {posts.map((post) =>
                <BlogPost url={post.url} title={post.frontmatter.title}/>)}
    </ul>
</BaseLayout>
